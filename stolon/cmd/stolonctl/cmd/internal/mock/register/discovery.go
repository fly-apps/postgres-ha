// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd/stolonctl/cmd/register/discovery.go

// Package mock_register is a generated GoMock package.
package mock_register

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
	register "github.com/sorintlab/stolon/cmd/stolonctl/cmd/register"
	reflect "reflect"
)

// MockServiceDiscovery is a mock of ServiceDiscovery interface
type MockServiceDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDiscoveryMockRecorder
}

// MockServiceDiscoveryMockRecorder is the mock recorder for MockServiceDiscovery
type MockServiceDiscoveryMockRecorder struct {
	mock *MockServiceDiscovery
}

// NewMockServiceDiscovery creates a new mock instance
func NewMockServiceDiscovery(ctrl *gomock.Controller) *MockServiceDiscovery {
	mock := &MockServiceDiscovery{ctrl: ctrl}
	mock.recorder = &MockServiceDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceDiscovery) EXPECT() *MockServiceDiscoveryMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockServiceDiscovery) Register(info *register.ServiceInfo) error {
	ret := m.ctrl.Call(m, "Register", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockServiceDiscoveryMockRecorder) Register(info interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServiceDiscovery)(nil).Register), info)
}

// Services mocks base method
func (m *MockServiceDiscovery) Services(name string) (register.ServiceInfos, error) {
	ret := m.ctrl.Call(m, "Services", name)
	ret0, _ := ret[0].(register.ServiceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Services indicates an expected call of Services
func (mr *MockServiceDiscoveryMockRecorder) Services(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockServiceDiscovery)(nil).Services), name)
}

// DeRegister mocks base method
func (m *MockServiceDiscovery) DeRegister(info *register.ServiceInfo) error {
	ret := m.ctrl.Call(m, "DeRegister", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeRegister indicates an expected call of DeRegister
func (mr *MockServiceDiscoveryMockRecorder) DeRegister(info interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeRegister", reflect.TypeOf((*MockServiceDiscovery)(nil).DeRegister), info)
}

// MockConsulAgent is a mock of ConsulAgent interface
type MockConsulAgent struct {
	ctrl     *gomock.Controller
	recorder *MockConsulAgentMockRecorder
}

// MockConsulAgentMockRecorder is the mock recorder for MockConsulAgent
type MockConsulAgentMockRecorder struct {
	mock *MockConsulAgent
}

// NewMockConsulAgent creates a new mock instance
func NewMockConsulAgent(ctrl *gomock.Controller) *MockConsulAgent {
	mock := &MockConsulAgent{ctrl: ctrl}
	mock.recorder = &MockConsulAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsulAgent) EXPECT() *MockConsulAgentMockRecorder {
	return m.recorder
}

// ServiceRegister mocks base method
func (m *MockConsulAgent) ServiceRegister(service *api.AgentServiceRegistration) error {
	ret := m.ctrl.Call(m, "ServiceRegister", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceRegister indicates an expected call of ServiceRegister
func (mr *MockConsulAgentMockRecorder) ServiceRegister(service interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceRegister", reflect.TypeOf((*MockConsulAgent)(nil).ServiceRegister), service)
}

// ServiceDeregister mocks base method
func (m *MockConsulAgent) ServiceDeregister(serviceID string) error {
	ret := m.ctrl.Call(m, "ServiceDeregister", serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceDeregister indicates an expected call of ServiceDeregister
func (mr *MockConsulAgentMockRecorder) ServiceDeregister(serviceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDeregister", reflect.TypeOf((*MockConsulAgent)(nil).ServiceDeregister), serviceID)
}

// Services mocks base method
func (m *MockConsulAgent) Services() (map[string]*api.AgentService, error) {
	ret := m.ctrl.Call(m, "Services")
	ret0, _ := ret[0].(map[string]*api.AgentService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Services indicates an expected call of Services
func (mr *MockConsulAgentMockRecorder) Services() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockConsulAgent)(nil).Services))
}

// MockConsulCatalog is a mock of ConsulCatalog interface
type MockConsulCatalog struct {
	ctrl     *gomock.Controller
	recorder *MockConsulCatalogMockRecorder
}

// MockConsulCatalogMockRecorder is the mock recorder for MockConsulCatalog
type MockConsulCatalogMockRecorder struct {
	mock *MockConsulCatalog
}

// NewMockConsulCatalog creates a new mock instance
func NewMockConsulCatalog(ctrl *gomock.Controller) *MockConsulCatalog {
	mock := &MockConsulCatalog{ctrl: ctrl}
	mock.recorder = &MockConsulCatalogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsulCatalog) EXPECT() *MockConsulCatalogMockRecorder {
	return m.recorder
}

// Service mocks base method
func (m *MockConsulCatalog) Service(service, tag string, q *api.QueryOptions) ([]*api.CatalogService, *api.QueryMeta, error) {
	ret := m.ctrl.Call(m, "Service", service, tag, q)
	ret0, _ := ret[0].([]*api.CatalogService)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Service indicates an expected call of Service
func (mr *MockConsulCatalogMockRecorder) Service(service, tag, q interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockConsulCatalog)(nil).Service), service, tag, q)
}
